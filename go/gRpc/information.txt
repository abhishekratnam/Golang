Calling proto.Marshal returns the protocol buffer, encoded
 in its wire format. For example, we use this function in the 
 add_person command:
book := &pb.AddressBook{}
// ...

// Write the new address book back to disk.
out, err := proto.Marshal(book)
if err != nil {
        log.Fatalln("Failed to encode address book:", err)
}
if err := ioutil.WriteFile(fname, out, 0644); err != nil {
        log.Fatalln("Failed to write address book:", err)
}



To parse an encoded message, you use the proto library's
 Unmarshal function. Calling this parses the data in buf as 
 a protocol buffer and places the result in pb.
 So to parse the file in the list_people command, we use:

 // Read the existing address book.
in, err := ioutil.ReadFile(fname)
if err != nil {
        log.Fatalln("Error reading file:", err)
}
book := &pb.AddressBook{}
if err := proto.Unmarshal(in, book); err != nil {
        log.Fatalln("Failed to parse address book:", err)
}


